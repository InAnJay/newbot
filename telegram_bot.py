import logging
import asyncio
from typing import Dict, List
from functools import wraps
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, InputMediaPhoto
from telegram.ext import Application, CommandHandler, CallbackQueryHandler, ContextTypes, MessageHandler, filters, ConversationHandler
from telegram.constants import ParseMode
from telegram.error import BadRequest
import requests
import os
from datetime import datetime
import json
from urllib.parse import urlparse, urlunparse

from config import TELEGRAM_BOT_TOKEN, ADMIN_USER_ID, TARGET_CHANNEL_ID
from database import Database
from scheduler import NewsScheduler
from mistral_client import MistralClient
from openai_client import OpenAIClient

logger = logging.getLogger(__name__)

# --- –î–µ–∫–æ—Ä–∞—Ç–æ—Ä –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ ---
def admin_only(func):
    """–î–µ–∫–æ—Ä–∞—Ç–æ—Ä, –∫–æ—Ç–æ—Ä—ã–π –ø—Ä–æ–≤–µ—Ä—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º."""
    @wraps(func)
    async def wrapped(self, update: Update, context: ContextTypes.DEFAULT_TYPE, *args, **kwargs):
        user_id = update.effective_user.id
        if user_id != ADMIN_USER_ID:
            message = "‚ùå –£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —ç—Ç–æ–º—É –±–æ—Ç—É."
            if update.callback_query:
                await update.callback_query.answer(message, show_alert=True)
            elif update.message:
                await update.message.reply_text(message)
            return
        return await func(self, update, context, *args, **kwargs)
    return wrapped

# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞
SOURCE_URL, SOURCE_NAME, SOURCE_TYPE = range(3)
# –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
KEYWORD_MANAGE, KEYWORD_ADD, KEYWORD_DELETE = range(3, 6)

class NewsBot:
    def __init__(self, db: Database, scheduler: NewsScheduler, mistral: MistralClient, openai: OpenAIClient):
        self.db = db
        self.scheduler = scheduler
        self.mistral = mistral
        self.openai = openai
        self.current_articles = {}  # –•—Ä–∞–Ω–∏—Ç —Ç–µ–∫—É—â–∏–µ —Å—Ç–∞—Ç—å–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        
    @admin_only
    async def start_command(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start"""
        await update.message.reply_text(
            "ü§ñ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –±–æ—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç—è–º–∏ –æ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞—Ö!\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
            reply_markup=self.get_main_menu_keyboard()
        )
    
    @admin_only
    async def button_callback(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –Ω–∞ –∫–Ω–æ–ø–∫–∏"""
        query = update.callback_query
        await query.answer()
        
        data = query.data
        
        if data == "view_news":
            await self.show_pending_news(query, context)
        elif data == "delete_duplicates":
            await self.delete_duplicates(query, context)
        elif data == "manage_sources":
            await self.manage_sources(query)
        elif data == "check_sources":
            await self.check_sources(query, context)
        elif data == "manage_keywords":
            await self.manage_keywords_menu(update, context)
        elif data == "statistics":
            await self.show_statistics(query)
        elif data.startswith("article_"):
            await self.show_article_details(query, data, context)
        elif data.startswith("rewrite_"):
            await self.rewrite_article(query, data, context)
        elif data.startswith("new_image_"):
            await self.generate_new_image(query, data, context)
        elif data.startswith("publish_"):
            await self.publish_article(query, data, context)
        elif data.startswith("reject_"):
            await self.reject_article(query, data, context)
        elif data == "main_menu":
            await self.show_main_menu(query, context)
        elif data == "add_source":
            await self.show_add_source_form(update, context)
        elif data.startswith("delete_source_"):
            await self.delete_source(query, data)
        elif data == "noop":
            await query.answer() # –ü—Ä–æ—Å—Ç–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –Ω–∞–∂–∞—Ç–∏–µ, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
    
    async def show_main_menu(self, query, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é (–Ω–∞–¥–µ–∂–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        text = "ü§ñ –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –±–æ—Ç–∞ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç—è–º–∏ –æ –º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å–∞—Ö\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"
        reply_markup = self.get_main_menu_keyboard()
        
        try:
            await query.edit_message_text(
                text,
                reply_markup=reply_markup
            )
        except BadRequest as e:
            if "Message is not modified" in str(e):
                # –°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –∏–∑–º–µ–Ω–∏–ª–æ—Å—å, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º
                pass
            elif "There is no text in the message to edit" in str(e):
                # –ù–µ –º–æ–∂–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ, –ø–æ—ç—Ç–æ–º—É —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                await query.delete_message()
                await context.bot.send_message(
                    chat_id=query.message.chat_id,
                    text=text,
                    reply_markup=reply_markup
                )
            else:
                # –ü—Ä–æ–±—Ä–∞—Å—ã–≤–∞–µ–º –¥—Ä—É–≥–∏–µ, –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –æ—à–∏–±–∫–∏
                raise

    async def delete_duplicates(self, query, context: ContextTypes.DEFAULT_TYPE):
        """–£–¥–∞–ª—è–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç—ã —Å—Ç–∞—Ç–µ–π –∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç —Å–ø–∏—Å–æ–∫."""
        await query.answer("‚è≥ –ò—â—É –∏ —É–¥–∞–ª—è—é –¥—É–±–ª–∏–∫–∞—Ç—ã...")
        
        deleted_count = self.db.delete_duplicate_articles()
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º edit_message_text, —á—Ç–æ–±—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –Ω–æ–≤–æ–µ –≤—Å–ø–ª—ã–≤–∞—é—â–µ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, 
        # –∞ —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑–∞—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.
        
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∂–µ–º –∫–æ—Ä–æ—Ç–∫–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
        if deleted_count > 0:
            await context.bot.send_message(query.message.chat_id, f"‚úÖ –£–¥–∞–ª–µ–Ω–æ {deleted_count} –¥—É–±–ª–∏–∫–∞—Ç–æ–≤.")
        else:
            await context.bot.send_message(query.message.chat_id, "üëç –î—É–±–ª–∏–∫–∞—Ç—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.")
            
        # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å–ø–∏—Å–∫–æ–º –Ω–æ–≤–æ—Å—Ç–µ–π
        await self.show_pending_news(query, context)

    async def show_pending_news(self, query, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ (–Ω–∞–¥–µ–∂–Ω–∞—è –≤–µ—Ä—Å–∏—è)."""
        articles = self.db.get_pending_articles()
        
        keyboard = []
        if not articles:
            message_text = "‚úÖ –í—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã! –ù–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –Ω–µ—Ç."
        else:
            message_text = "üì∞ **–ù–æ–≤–æ—Å—Ç–∏ –Ω–∞ –º–æ–¥–µ—Ä–∞—Ü–∏—é:**\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ—Å—Ç—å –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞."
            for article in articles:
                title = (article['original_title'] or '–ë–µ–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞')[:50]
                keyboard.append(
                    [InlineKeyboardButton(title, callback_data=f"article_{article['id']}")]
                )
        
        if articles:
            keyboard.append([InlineKeyboardButton("üóëÔ∏è –£–¥–∞–ª–∏—Ç—å –¥—É–±–ª–∏", callback_data="delete_duplicates")])

        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        try:
            await query.edit_message_text(
                message_text,
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN
            )
        except BadRequest as e:
            if "Message is not modified" in str(e):
                pass
            elif "There is no text in the message to edit" in str(e):
                # –ù–µ –º–æ–∂–µ–º –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ñ–æ—Ç–æ, –ø–æ—ç—Ç–æ–º—É —É–¥–∞–ª—è–µ–º –µ–≥–æ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ
                await query.delete_message()
                await context.bot.send_message(
                    chat_id=query.message.chat_id,
                    text=message_text,
                    reply_markup=reply_markup,
                    parse_mode=ParseMode.MARKDOWN
                )
            else:
                raise

    async def send_article_for_review(self, context: ContextTypes.DEFAULT_TYPE, chat_id: int, article_id: int):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ —Å—Ç–∞—Ç—å–µ–π –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É."""
        article = self.db.get_article_by_id(article_id)
        if not article:
            await context.bot.send_message(chat_id, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å—Ç–∞—Ç—å—é.")
            return

        # –ï—Å–ª–∏ —Å—Ç–∞—Ç—å—è –µ—â–µ –Ω–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞, –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –µ—ë
        if not article['rewritten_title']:
            processing_message = await context.bot.send_message(chat_id, "‚è≥ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é —Å—Ç–∞—Ç—å—é (—Ç–µ–∫—Å—Ç –∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ)...")
            
            rewritten = self.mistral.rewrite_news_article(
                article['original_title'], 
                article['original_content']
            )
            image_url = self.openai.generate_image(
                rewritten['title'],
                rewritten['content']
            )
            
            self.db.update_article_rewrite(
                article_id, rewritten['title'], rewritten['content'], rewritten['hashtags']
            )
            if image_url: # –¢–µ–ø–µ—Ä—å —ç—Ç–æ –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å
                self.db.update_article_image(article_id, "", image_url) # –ú–µ–Ω—è–µ–º –º–µ—Å—Ç–∞–º–∏ URL –∏ –ø—É—Ç—å
            
            await processing_message.delete()
            article = self.db.get_article_by_id(article_id) # –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
        
        hashtags = json.loads(article['hashtags']) if article.get('hashtags') else []
        
        message = f"**{article['rewritten_title']}**\n\n"
        message += f"{article['rewritten_content']}\n\n"
        if hashtags:
            message += " ".join(hashtags) + "\n\n"
        message += f"üîó –ò—Å—Ç–æ—á–Ω–∏–∫: {article['original_url']}"
        
        keyboard = [
            [
                InlineKeyboardButton("‚úèÔ∏è –ü–µ—Ä–µ–ø–∏—Å–∞—Ç—å", callback_data=f"rewrite_{article_id}"),
                InlineKeyboardButton("üñºÔ∏è –ù–æ–≤–∞—è –∫–∞—Ä—Ç–∏–Ω–∫–∞", callback_data=f"new_image_{article_id}")
            ],
            [
                InlineKeyboardButton("‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data=f"publish_{article_id}"),
                InlineKeyboardButton("‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å", callback_data=f"reject_{article_id}")
            ],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –∫ —Å–ø–∏—Å–∫—É", callback_data="view_news")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        image_path = article.get('image_path')
        if image_path and os.path.exists(image_path):
            try:
                with open(image_path, 'rb') as photo_file:
                    await context.bot.send_photo(
                        chat_id=chat_id,
                        photo=photo_file,
                        caption=message,
                        parse_mode=ParseMode.MARKDOWN,
                        reply_markup=reply_markup
                    )
            finally:
                # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏
                if os.path.exists(image_path):
                    os.remove(image_path)
        else:
            await context.bot.send_message(
                chat_id=chat_id,
                text=message,
                parse_mode=ParseMode.MARKDOWN,
                reply_markup=reply_markup,
                disable_web_page_preview=True
            )

    async def show_article_details(self, query, data, context: ContextTypes.DEFAULT_TYPE):
        """–ü–æ–∫–∞–∑–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —Å—Ç–∞—Ç—å–∏"""
        article_id = int(data.split("_")[1])
        article = self.db.get_article_by_id(article_id)
        
        if not article:
            await query.edit_message_text("‚ùå –°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")
            return

        # –£–¥–∞–ª—è–µ–º –ø—Ä–µ–¥—ã–¥—É—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (—Å–ø–∏—Å–æ–∫ –Ω–æ–≤–æ—Å—Ç–µ–π)
        await query.delete_message()

        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—å—é –∫–∞–∫ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await self.send_article_for_review(context, query.message.chat_id, article_id)


    async def rewrite_article(self, query, data, context: ContextTypes.DEFAULT_TYPE):
        """–ü–µ—Ä–µ–ø–∏—Å–∞—Ç—å —Å—Ç–∞—Ç—å—é (–Ω–∞–¥–µ–∂–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        article_id = int(data.split("_")[1])
        article = self.db.get_article_by_id(article_id)
        
        if not article:
            await query.answer("‚ùå –°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
            return
        
        await query.delete_message()
        processing_message = await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="‚è≥ –ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞—é —Å—Ç–∞—Ç—å—é —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ –ø—Ä–æ–º–ø—Ç–∞..."
        )
        
        # –ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—å—é
        rewritten = self.mistral.rewrite_news_article(
            article['original_title'], 
            article['original_content']
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –±–∞–∑—É
        self.db.update_article_rewrite(
            article_id, 
            rewritten['title'], 
            rewritten['content'],
            rewritten['hashtags']
        )
        
        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ "–ü–µ—Ä–µ–ø–∏—Å—ã–≤–∞—é..."
        await processing_message.delete()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç—å—é –∫–∞–∫ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await self.send_article_for_review(context, query.message.chat_id, article_id)
    
    async def generate_new_image(self, query, data, context: ContextTypes.DEFAULT_TYPE):
        """–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ (–Ω–∞–¥–µ–∂–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        article_id = int(data.split("_")[1])
        article = self.db.get_article_by_id(article_id)
        
        if not article:
            await query.answer("‚ùå –°—Ç–∞—Ç—å—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", show_alert=True)
            return
        
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ
        await query.delete_message()
        processing_message = await context.bot.send_message(
            chat_id=query.message.chat_id,
            text="‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ..."
        )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image_path = self.openai.generate_image(
            article['rewritten_title'] or article['original_title'], 
            article['rewritten_content'] or article['original_content']
        )
        
        if image_path:
            self.db.update_article_image(article_id, "", image_path) # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–π –ø—É—Ç—å
        else:
            await processing_message.edit_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ. –ü–æ–∫–∞–∑—ã–≤–∞—é —Å—Ç–∞—Ç—å—é —Å–æ —Å—Ç–∞—Ä—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º.")
            await asyncio.sleep(2)

        # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await processing_message.delete()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é —Å—Ç–∞—Ç—å—é –∫–∞–∫ –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await self.send_article_for_review(context, query.message.chat_id, article_id)

    async def publish_article(self, query, data, context: ContextTypes.DEFAULT_TYPE):
        """–ü—É–±–ª–∏–∫—É–µ—Ç —Å—Ç–∞—Ç—å—é –≤ —Ü–µ–ª–µ–≤–æ–π –∫–∞–Ω–∞–ª."""
        article_id = int(data.split("_")[1])
        
        if not TARGET_CHANNEL_ID:
            await query.answer("‚ùå ID –∫–∞–Ω–∞–ª–∞ –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ (TARGET_CHANNEL_ID) –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω!", show_alert=True)
            return

        article = self.db.get_article_by_id(article_id)
        if not article:
            await query.answer("‚ùå –ù–µ –º–æ–≥—É –Ω–∞–π—Ç–∏ —Å—Ç–∞—Ç—å—é –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏.", show_alert=True)
            return

        # –§–æ—Ä–º–∏—Ä—É–µ–º —Ñ–∏–Ω–∞–ª—å–Ω—ã–π –ø–æ—Å—Ç
        hashtags = json.loads(article['hashtags']) if article.get('hashtags') else []
        
        message = f"**{article['rewritten_title']}**\n\n"
        message += f"{article['rewritten_content']}\n\n"
        if hashtags:
            message += " ".join(hashtags) + "\n\n"
        message += f"üîó –ò—Å—Ç–æ—á–Ω–∏–∫: {article['original_url']}"

        try:
            await query.answer("‚è≥ –ü—É–±–ª–∏–∫—É—é...")
            image_path = article.get('image_path')
            
            if image_path and os.path.exists(image_path):
                with open(image_path, 'rb') as photo_file:
                    await context.bot.send_photo(
                        chat_id=TARGET_CHANNEL_ID,
                        photo=photo_file,
                        caption=message,
                        parse_mode=ParseMode.MARKDOWN
                    )
                # –£–¥–∞–ª—è–µ–º —Ñ–∞–π–ª –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –ø—É–±–ª–∏–∫–∞—Ü–∏–∏
                try:
                    os.remove(image_path)
                except OSError as e:
                    logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è {image_path}: {e}")
            else:
                # –ï—Å–ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –Ω–µ—Ç, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç
                await context.bot.send_message(
                    chat_id=TARGET_CHANNEL_ID,
                    text=message,
                    parse_mode=ParseMode.MARKDOWN,
                    disable_web_page_preview=True
                )
            
            # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å —Å—Ç–∞—Ç—å–∏ –≤ –ë–î
            self.db.update_article_status(article_id, 'published')
            await query.delete_message() # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            
            # –ò–Ω—Ñ–æ—Ä–º–∏—Ä—É–µ–º –∞–¥–º–∏–Ω–∞ –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å—Ç–∞—Ç—å—é
            await context.bot.send_message(query.message.chat_id, "‚úÖ –°—Ç–∞—Ç—å—è —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –≤ –∫–∞–Ω–∞–ª–µ!")

        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å—Ç–∞—Ç—å–∏ {article_id} –≤ –∫–∞–Ω–∞–ª {TARGET_CHANNEL_ID}: {e}")
            await context.bot.send_message(
                chat_id=query.message.chat_id,
                text=f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏: {e}"
            )
            return # –ü—Ä–µ—Ä—ã–≤–∞–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å—Ç–∞—Ç—å—é –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é
        articles = self.db.get_pending_articles()
        if articles:
            await self.send_article_for_review(context, query.message.chat_id, articles[0]['id'])
        else:
            await context.bot.send_message(
                query.message.chat_id,
                "‚úÖ –í—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã! –ù–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –Ω–µ—Ç.",
                reply_markup=self.get_main_menu_keyboard()
            )

    async def reject_article(self, query, data, context: ContextTypes.DEFAULT_TYPE):
        """–û—Ç–∫–ª–æ–Ω–∏—Ç—å —Å—Ç–∞—Ç—å—é"""
        article_id = int(data.split("_")[1])
        
        self.db.update_article_status(article_id, 'rejected')
        
        await query.delete_message()
        await context.bot.send_message(query.message.chat_id, "‚ùå –°—Ç–∞—Ç—å—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞.")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–ª–µ–¥—É—é—â—É—é —Å—Ç–∞—Ç—å—é
        articles = self.db.get_pending_articles()
        if articles:
            await self.send_article_for_review(context, query.message.chat_id, articles[0]['id'])
        else:
            await context.bot.send_message(
                query.message.chat_id,
                "‚úÖ –í—Å–µ –Ω–æ–≤–æ—Å—Ç–∏ –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã!",
                reply_markup=self.get_main_menu_keyboard()
            )

    async def manage_sources(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏"""
        sources = self.db.get_news_sources(active_only=False)
        
        keyboard = []
        for source in sources:
            status = "‚úÖ" if source.get('is_active', 1) else "‚ùå"
            keyboard.append([
                InlineKeyboardButton(
                    f"{status} {source['name']}", 
                    callback_data=f"noop" # Placeholder, toggle not implemented
                ),
                InlineKeyboardButton(
                    "‚ùå –£–¥–∞–ª–∏—Ç—å", 
                    callback_data=f"delete_source_{source['id']}"
                )
            ])
        
        keyboard.append([InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫", callback_data="add_source")])
        keyboard.append([InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")])
        
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        message = "‚öôÔ∏è **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏ –Ω–æ–≤–æ—Å—Ç–µ–π**\n\n"
        if not sources:
            message += "–ü–æ–∫–∞ –Ω–µ—Ç –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤."
        else:
            message += "–í—ã –º–æ–∂–µ—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å –Ω–æ–≤—ã–π –∏—Å—Ç–æ—á–Ω–∏–∫ –∏–ª–∏ —É–¥–∞–ª–∏—Ç—å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π."
        
        try:
            await query.edit_message_text(
                message,
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN,
                disable_web_page_preview=True
            )
        except BadRequest as e:
            if "Message is not modified" in str(e):
                pass
            else:
                raise

    async def delete_source(self, query, data):
        """–£–¥–∞–ª–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫ –Ω–æ–≤–æ—Å—Ç–µ–π"""
        source_id = int(data.split("_")[2])
        
        source = self.db.get_source_by_id(source_id)
        if not source:
            await query.answer("‚ùå –ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.", show_alert=True)
            return

        try:
            self.db.delete_news_source(source_id)
            await query.answer(f"‚úÖ –ò—Å—Ç–æ—á–Ω–∏–∫ '{source['name']}' —É–¥–∞–ª–µ–Ω.")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ {source_id}: {e}")
            await query.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏.", show_alert=True)
        
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
        await self.manage_sources(query)

    def normalize_url(self, url: str) -> str:
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç URL, —É–±–∏—Ä–∞—è –ø–∞—Ä–∞–º–µ—Ç—Ä—ã, —Ñ—Ä–∞–≥–º–µ–Ω—Ç—ã –∏ –∫–æ–Ω–µ—á–Ω—ã–π —Å–ª—ç—à."""
        if not url:
            return ""
        try:
            parsed = urlparse(url)
            path = parsed.path.rstrip('/')
            normalized = urlunparse((parsed.scheme, parsed.netloc, path, '', '', ''))
            return normalized
        except Exception as e:
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞—Ç—å URL '{url}': {e}")
            return url

    async def check_sources(self, query, context: ContextTypes.DEFAULT_TYPE):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤ –∏ —Å–æ–æ–±—â–∞–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
        await query.answer("‚è≥ –ó–∞–ø—É—Å–∫–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è.")
        
        # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —á—Ç–æ–±—ã –ø–æ–∫–∞–∑–∞—Ç—å, —á—Ç–æ –∏–¥–µ—Ç —Ä–∞–±–æ—Ç–∞
        try:
            await query.edit_message_text(
                text="‚è≥ –í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤... –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ.",
            )
        except BadRequest as e:
            if "Message is not modified" in str(e):
                pass # –ù–∏—á–µ–≥–æ —Å—Ç—Ä–∞—à–Ω–æ–≥–æ, –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É–∂–µ —Ç–∞–∫–æ–µ
            else:
                raise

        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ç—è–∂–µ–ª—É—é –∑–∞–¥–∞—á—É –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
        loop = asyncio.get_event_loop()
        new_articles_count = await loop.run_in_executor(
            None, self.scheduler.force_check_sources
        )

        # –°–æ–æ–±—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏ —Å–Ω–æ–≤–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ–Ω—é
        text = (
            f"‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!\n\n"
            f"–ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π: **{new_articles_count}**.\n\n"
            "–ù–æ–≤—ã–µ —Å—Ç–∞—Ç—å–∏ (–µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å) —Ç–µ–ø–µ—Ä—å –¥–æ—Å—Ç—É–ø–Ω—ã –¥–ª—è –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –≤ —Ä–∞–∑–¥–µ–ª–µ '–ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–æ–≤–æ—Å—Ç–∏'."
        )
        
        await query.edit_message_text(
            text=text,
            reply_markup=self.get_main_menu_keyboard(),
            parse_mode=ParseMode.MARKDOWN
        )
    
    async def show_statistics(self, query):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É"""
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –±–æ–ª–µ–µ –¥–µ—Ç–∞–ª—å–Ω—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥", callback_data="main_menu")]]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        text = ("üìä **–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±–æ—Ç–∞**\n\n"
                "–§—É–Ω–∫—Ü–∏—è –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ...")
        
        try:
            await query.edit_message_text(
                text,
                reply_markup=reply_markup,
                parse_mode=ParseMode.MARKDOWN
            )
        except BadRequest as e:
            if "Message is not modified" in str(e):
                pass
            else:
                raise
    
    def get_main_menu_keyboard(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é."""
        keyboard = [
            [InlineKeyboardButton("üì∞ –ü—Ä–æ—Å–º–æ—Ç—Ä–µ—Ç—å –Ω–æ–≤–æ—Å—Ç–∏", callback_data="view_news")],
            [InlineKeyboardButton("‚öôÔ∏è –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∏—Å—Ç–æ—á–Ω–∏–∫–∞–º–∏", callback_data="manage_sources")],
            [InlineKeyboardButton("üîë –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Å–ª–æ–≤–∞–º–∏", callback_data="manage_keywords")],
            [InlineKeyboardButton("üîÑ –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Å—Ç–æ—á–Ω–∏–∫–∏", callback_data="check_sources")],
            [InlineKeyboardButton("üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", callback_data="statistics")]
        ]
        return InlineKeyboardMarkup(keyboard)

    # --- –ù–∞—á–∞–ª–æ –±–ª–æ–∫–∞ ConversationHandler –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞ ---

    async def show_add_source_form(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ù–∞—á–∞–ª–æ –¥–∏–∞–ª–æ–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞."""
        query = update.callback_query
        await query.answer()
        await query.edit_message_text(
            "‚ûï **–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞**\n\n"
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Å—Å—ã–ª–∫—É (URL) –Ω–∞ –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –∏—Å—Ç–æ—á–Ω–∏–∫.\n\n"
            "–ß—Ç–æ–±—ã –æ—Ç–º–µ–Ω–∏—Ç—å, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É /cancel."
        )
        return SOURCE_URL

    async def receive_url(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ URL –∏ –∑–∞–ø—Ä–æ—Å –Ω–∞–∑–≤–∞–Ω–∏—è."""
        url = update.message.text
        if not url.startswith('http'):
            await update.message.reply_text(
                "–≠—Ç–æ –Ω–µ –ø–æ—Ö–æ–∂–µ –Ω–∞ —Å—Å—ã–ª–∫—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL, –Ω–∞—á–∏–Ω–∞—é—â–∏–π—Å—è —Å http –∏–ª–∏ https."
            )
            return SOURCE_URL
        
        context.user_data['source_url'] = url
        await update.message.reply_text(
            "–û—Ç–ª–∏—á–Ω–æ! –¢–µ–ø–µ—Ä—å –ø—Ä–∏–¥—É–º–∞–π—Ç–µ –∫–æ—Ä–æ—Ç–∫–æ–µ –∏ –ø–æ–Ω—è—Ç–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–ª—è —ç—Ç–æ–≥–æ –∏—Å—Ç–æ—á–Ω–∏–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, '–ù–æ–≤–æ—Å—Ç–∏ Shoppers')."
        )
        return SOURCE_NAME

    async def receive_name(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –∑–∞–ø—Ä–æ—Å —Ç–∏–ø–∞."""
        context.user_data['source_name'] = update.message.text
        
        keyboard = [
            [
                InlineKeyboardButton("RSS", callback_data="rss"),
                InlineKeyboardButton("–í–µ–±-—Å–∞–π—Ç", callback_data="website"),
                InlineKeyboardButton("Telegram", callback_data="telegram"),
            ]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await update.message.reply_text("–°–ø–∞—Å–∏–±–æ! –û—Å—Ç–∞–ª—Å—è –ø–æ—Å–ª–µ–¥–Ω–∏–π —à–∞–≥. –í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –∏—Å—Ç–æ—á–Ω–∏–∫–∞:", reply_markup=reply_markup)
        return SOURCE_TYPE

    async def receive_type(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–∏–ø–∞, —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –¥–∏–∞–ª–æ–≥–∞."""
        query = update.callback_query
        await query.answer()
        
        source_type = query.data
        name = context.user_data.get('source_name')
        url = context.user_data.get('source_url')
        
        try:
            source_id = self.db.add_news_source(name, url, source_type)
            message = (
                f"‚úÖ –ò—Å—Ç–æ—á–Ω–∏–∫ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω!\n\n"
                f"**–ù–∞–∑–≤–∞–Ω–∏–µ:** {name}\n"
                f"**–¢–∏–ø:** {source_type}\n"
                f"**URL:** {url}"
            )
            await query.edit_message_text(
                message,
                parse_mode=ParseMode.MARKDOWN,
                disable_web_page_preview=True,
                reply_markup=self.get_back_to_menu_keyboard()
            )
        except Exception as e:
            await query.edit_message_text(
                f"‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∏—Å—Ç–æ—á–Ω–∏–∫–∞: {e}",
                reply_markup=self.get_back_to_menu_keyboard()
            )
        
        context.user_data.clear()
        return ConversationHandler.END
        
    async def cancel_add_source(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞."""
        await update.message.reply_text(
            "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=self.get_main_menu_keyboard()
        )
        context.user_data.clear()
        return ConversationHandler.END

    # --- –ö–æ–Ω–µ—Ü –±–ª–æ–∫–∞ ConversationHandler ---
    
    # --- –ù–∞—á–∞–ª–æ –±–ª–æ–∫–∞ ConversationHandler –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ ---

    async def manage_keywords_menu(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏."""
        query = update.callback_query
        await query.answer()

        keywords = self.db.get_keywords()
        text = "üîë **–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏**\n\n"
        if keywords:
            text += "–¢–µ–∫—É—â–∏–µ —Å–ª–æ–≤–∞:\n`" + "`, `".join(keywords) + "`\n\n"
        else:
            text += "–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.\n\n"
        text += "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:"

        keyboard = [
            [InlineKeyboardButton("‚ûï –î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ", callback_data="keyword_add")],
            [InlineKeyboardButton("‚ûñ –£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ", callback_data="keyword_delete")],
            [InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]
        ]
        reply_markup = InlineKeyboardMarkup(keyboard)

        await query.edit_message_text(text, reply_markup=reply_markup, parse_mode=ParseMode.MARKDOWN)
        return KEYWORD_MANAGE

    async def ask_for_keyword_to_add(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–ª–æ–≤–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è."""
        query = update.callback_query
        await query.answer()
        await query.edit_message_text("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è. –î–ª—è –æ—Ç–º–µ–Ω—ã –≤–≤–µ–¥–∏—Ç–µ /cancel.")
        return KEYWORD_ADD

    async def add_keyword(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–î–æ–±–∞–≤–ª—è–µ—Ç –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –≤ –±–∞–∑—É."""
        keyword = update.message.text.strip().lower()
        if self.db.add_keyword(keyword):
            await update.message.reply_text(f"‚úÖ –°–ª–æ–≤–æ '{keyword}' —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ.")
        else:
            await update.message.reply_text(f"‚ö†Ô∏è –°–ª–æ–≤–æ '{keyword}' —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç.")
        
        # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –≤ –º–µ–Ω—é —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        await self.manage_keywords_menu(update, context)
        return ConversationHandler.END

    async def ask_for_keyword_to_delete(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–ó–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è."""
        query = update.callback_query
        await query.answer()
        
        keywords = self.db.get_keywords()
        if not keywords:
            await query.edit_message_text("–ù–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å. –°–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –ø—É—Å—Ç.", reply_markup=self.get_back_to_menu_keyboard())
            return ConversationHandler.END

        keyboard = [[InlineKeyboardButton(kw, callback_data=f"delkw_{kw}")] for kw in keywords]
        keyboard.append([InlineKeyboardButton("üîô –û—Ç–º–µ–Ω–∞", callback_data="keyword_manage")])
        reply_markup = InlineKeyboardMarkup(keyboard)
        
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è:", reply_markup=reply_markup)
        return KEYWORD_DELETE

    async def delete_keyword(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–£–¥–∞–ª—è–µ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–µ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ."""
        query = update.callback_query
        await query.answer()
        
        keyword_to_delete = query.data.split("_")[1]
        
        if self.db.delete_keyword(keyword_to_delete):
            await query.answer(f"‚úÖ –°–ª–æ–≤–æ '{keyword_to_delete}' —É–¥–∞–ª–µ–Ω–æ.")
        else:
            await query.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ '{keyword_to_delete}'.", show_alert=True)
            
        # –û–±–Ω–æ–≤–ª—è–µ–º –º–µ–Ω—é
        await self.manage_keywords_menu(update, context)
        return ConversationHandler.END

    async def cancel_keyword_manage(self, update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
        """–û—Ç–º–µ–Ω–∞ –ø—Ä–æ—Ü–µ—Å—Å–∞ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏."""
        await update.message.reply_text(
            "–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ. –í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=self.get_main_menu_keyboard()
        )
        context.user_data.clear()
        return ConversationHandler.END

    # --- –ö–æ–Ω–µ—Ü –±–ª–æ–∫–∞ ConversationHandler –¥–ª—è –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ ---
    
    def get_back_to_menu_keyboard(self):
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π '–ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é'."""
        keyboard = [[InlineKeyboardButton("üîô –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data="main_menu")]]
        return InlineKeyboardMarkup(keyboard)

    @admin_only
    async def handle_unknown_message(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
        await update.message.reply_text(
            "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –≤ –º–µ–Ω—é –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–æ–º.",
            reply_markup=self.get_main_menu_keyboard()
        )
    
    def run(self):
        """–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞"""
        if not TELEGRAM_BOT_TOKEN:
            raise ValueError("TELEGRAM_BOT_TOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        
        application = Application.builder().token(TELEGRAM_BOT_TOKEN).build()
        
        # –°–æ–∑–¥–∞–µ–º ConversationHandler –¥–ª—è –¥–∏–∞–ª–æ–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏—Å—Ç–æ—á–Ω–∏–∫–∞
        add_source_conv_handler = ConversationHandler(
            entry_points=[CallbackQueryHandler(self.show_add_source_form, pattern='^add_source$')],
            states={
                SOURCE_URL: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.receive_url)],
                SOURCE_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.receive_name)],
                SOURCE_TYPE: [CallbackQueryHandler(self.receive_type, pattern='^(rss|website|telegram)$')],
            },
            fallbacks=[CommandHandler('cancel', self.cancel_add_source)],
        )

        # –°–æ–∑–¥–∞–µ–º ConversationHandler –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏
        manage_keywords_conv_handler = ConversationHandler(
            entry_points=[CallbackQueryHandler(self.manage_keywords_menu, pattern='^manage_keywords$')],
            states={
                KEYWORD_MANAGE: [
                    CallbackQueryHandler(self.ask_for_keyword_to_add, pattern='^keyword_add$'),
                    CallbackQueryHandler(self.ask_for_keyword_to_delete, pattern='^keyword_delete$'),
                    CallbackQueryHandler(self.show_main_menu_from_update, pattern='^main_menu$')
                ],
                KEYWORD_ADD: [MessageHandler(filters.TEXT & ~filters.COMMAND, self.add_keyword)],
                KEYWORD_DELETE: [CallbackQueryHandler(self.delete_keyword, pattern='^delkw_')],
            },
            fallbacks=[CommandHandler('cancel', self.cancel_keyword_manage)],
            map_to_parent={
                # –í–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
                ConversationHandler.END: ConversationHandler.END
            }
        )
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏. ConversationHandler –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–µ—Ä–≤—ã–º.
        application.add_handler(add_source_conv_handler)
        application.add_handler(manage_keywords_conv_handler)
        application.add_handler(CommandHandler("start", self.start_command))
        application.add_handler(CallbackQueryHandler(self.button_callback))
        application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, self.handle_unknown_message))
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        application.run_polling()

    async def show_main_menu_from_update(self, update: Update, context: ContextTypes.DEFAULT_TYPE):
        await self.show_main_menu(update.callback_query, context)
        return ConversationHandler.END
